/**
 * Open APi
 * This is a sample server. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comment from '../model/Comment';
import Media from '../model/Media';

/**
* Comment service.
* @module api/CommentApi
* @version 1.0.0
*/
export default class CommentApi {

    /**
    * Constructs a new CommentApi. 
    * @alias module:api/CommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addComment operation.
     * @callback module:api/CommentApi~addCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new comment
     * @param {module:model/Comment} comment Comment object that needs to be added
     * @param {module:api/CommentApi~addCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addComment(comment, callback) {
      let postBody = comment;
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling addComment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/CommentApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a comment
     * @param {String} commentId Comment id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/CommentApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComment(commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteComment");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comment/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentById operation.
     * @callback module:api/CommentApi~getCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find comment by ID
     * Returns a single comment
     * @param {String} commentId ID of comment to return
     * @param {module:api/CommentApi~getCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    getCommentById(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getCommentById");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/comment/{commentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComment operation.
     * @callback module:api/CommentApi~updateCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing comment
     * @param {module:model/Comment} comment Comment object that needs to be added
     * @param {module:api/CommentApi~updateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateComment(comment, callback) {
      let postBody = comment;
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateComment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentWithForm operation.
     * @callback module:api/CommentApi~updateCommentWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a comment with form data
     * @param {String} commentId ID of comment that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.postId 
     * @param {String} opts.blogId 
     * @param {String} opts.parentId 
     * @param {String} opts.authorDisplayName 
     * @param {Date} opts.createdTimestamp 
     * @param {Date} opts.modifiedTimestamp 
     * @param {String} opts.content 
     * @param {module:model/String} opts.status 
     * @param {Number} opts.downvoteCount 
     * @param {Number} opts.upvoteCount 
     * @param {module:model/Media} opts.media 
     * @param {module:api/CommentApi~updateCommentWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCommentWithForm(commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateCommentWithForm");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'userId': opts['userId'],
        'postId': opts['postId'],
        'blogId': opts['blogId'],
        'parentId': opts['parentId'],
        'authorDisplayName': opts['authorDisplayName'],
        'created_timestamp': opts['createdTimestamp'],
        'modified_timestamp': opts['modifiedTimestamp'],
        'content': opts['content'],
        'status': opts['status'],
        'downvoteCount': opts['downvoteCount'],
        'upvoteCount': opts['upvoteCount'],
        'media': opts['media']
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comment/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
