/**
 * GComments
 * APIs for creating and managing comments 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@comments.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Blog from '../model/Blog';

/**
* Blog service.
* @module api/BlogApi
* @version 1.0.0
*/
export default class BlogApi {

    /**
    * Constructs a new BlogApi. 
    * @alias module:api/BlogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBlog operation.
     * @callback module:api/BlogApi~addBlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new blog
     * @param {Object} opts Optional parameters
     * @param {module:model/Blog} opts.blog Blog object that needs to be added
     * @param {module:api/BlogApi~addBlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBlog(opts, callback) {
      opts = opts || {};
      let postBody = opts['blog'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlog operation.
     * @callback module:api/BlogApi~deleteBlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a blog
     * @param {String} blogId Blog id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/BlogApi~deleteBlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBlog(blogId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling deleteBlog");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlogById operation.
     * @callback module:api/BlogApi~getBlogByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find blog by ID
     * Returns a single blog
     * @param {String} blogId ID of blog to return
     * @param {module:api/BlogApi~getBlogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blog}
     */
    getBlogById(blogId, callback) {
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling getBlogById");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Blog;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlog operation.
     * @callback module:api/BlogApi~updateBlogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing blog
     * @param {Object} opts Optional parameters
     * @param {module:model/Blog} opts.blog Blog object that needs to be added
     * @param {module:api/BlogApi~updateBlogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBlog(opts, callback) {
      opts = opts || {};
      let postBody = opts['blog'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blog', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlogWithForm operation.
     * @callback module:api/BlogApi~updateBlogWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a blog with form data
     * @param {String} blogId ID of blog that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.url 
     * @param {String} opts.authToken 
     * @param {module:model/String} opts.commentStatus 
     * @param {module:api/BlogApi~updateBlogWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBlogWithForm(blogId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling updateBlogWithForm");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'url': opts['url'],
        'authToken': opts['authToken'],
        'commentStatus': opts['commentStatus']
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
