/**
 * Open APi
 * This is a sample server. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Post from '../model/Post';

/**
* Post service.
* @module api/PostApi
* @version 1.0.0
*/
export default class PostApi {

    /**
    * Constructs a new PostApi. 
    * @alias module:api/PostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPost operation.
     * @callback module:api/PostApi~addPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new post
     * @param {Object} opts Optional parameters
     * @param {module:model/Post} opts.post Post object that needs to be added
     * @param {module:api/PostApi~addPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePost operation.
     * @callback module:api/PostApi~deletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a post
     * @param {String} postId Post id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/PostApi~deletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePost(postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling deletePost");
      }

      let pathParams = {
        'postId': postId
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/post/{postId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostById operation.
     * @callback module:api/PostApi~getPostByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find post by ID
     * Returns a single post
     * @param {String} postId ID of post to return
     * @param {module:api/PostApi~getPostByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    getPostById(postId, callback) {
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling getPostById");
      }

      let pathParams = {
        'postId': postId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/post/{postId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:api/PostApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing post
     * @param {Object} opts Optional parameters
     * @param {module:model/Post} opts.post Post object that needs to be added
     * @param {module:api/PostApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/post', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePostWithForm operation.
     * @callback module:api/PostApi~updatePostWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a post with form data
     * @param {String} postId ID of post that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.title 
     * @param {String} opts.url 
     * @param {String} opts.excerpt 
     * @param {String} opts.content 
     * @param {module:model/String} opts.commentStatus 
     * @param {String} opts.postType 
     * @param {module:api/PostApi~updatePostWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePostWithForm(postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling updatePostWithForm");
      }

      let pathParams = {
        'postId': postId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'title': opts['title'],
        'url': opts['url'],
        'excerpt': opts['excerpt'],
        'content': opts['content'],
        'commentStatus': opts['commentStatus'],
        'postType': opts['postType']
      };

      let authNames = ['cm_auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/post/{postId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
