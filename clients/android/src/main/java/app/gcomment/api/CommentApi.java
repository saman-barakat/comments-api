/**
 * GComments
 * APIs for creating and managing comments 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@comments.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package app.gcomment.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import app.gcomments.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import app.gcomments.model.Comment;
import java.util.Date;
import app.gcomments.model.Media;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CommentApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add a new comment
  * 
   * @param comment Comment object that needs to be added
   * @return void
  */
  public void addComment (Comment comment) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = comment;
    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling addComment",
        new ApiException(400, "Missing the required parameter 'comment' when calling addComment"));
    }

    // create path and map variables
    String path = "/comment";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "cm_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add a new comment
   * 
   * @param comment Comment object that needs to be added
  */
  public void addComment (Comment comment, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = comment;

    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling addComment",
        new ApiException(400, "Missing the required parameter 'comment' when calling addComment"));
    }

    // create path and map variables
    String path = "/comment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "cm_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes a comment
  * 
   * @param commentId Comment id to delete
   * @param apiKey 
   * @return void
  */
  public void deleteComment (String commentId, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling deleteComment",
        new ApiException(400, "Missing the required parameter 'commentId' when calling deleteComment"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "cm_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes a comment
   * 
   * @param commentId Comment id to delete   * @param apiKey 
  */
  public void deleteComment (String commentId, String apiKey, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling deleteComment",
        new ApiException(400, "Missing the required parameter 'commentId' when calling deleteComment"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "cm_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find comment by ID
  * Returns a single comment
   * @param commentId ID of comment to return
   * @return Comment
  */
  public Comment getCommentById (String commentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling getCommentById",
        new ApiException(400, "Missing the required parameter 'commentId' when calling getCommentById"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Comment) ApiInvoker.deserialize(localVarResponse, "", Comment.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find comment by ID
   * Returns a single comment
   * @param commentId ID of comment to return
  */
  public void getCommentById (String commentId, final Response.Listener<Comment> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling getCommentById",
        new ApiException(400, "Missing the required parameter 'commentId' when calling getCommentById"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Comment) ApiInvoker.deserialize(localVarResponse,  "", Comment.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update an existing comment
  * 
   * @param comment Comment object that needs to be added
   * @return void
  */
  public void updateComment (Comment comment) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = comment;
    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling updateComment",
        new ApiException(400, "Missing the required parameter 'comment' when calling updateComment"));
    }

    // create path and map variables
    String path = "/comment";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "cm_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update an existing comment
   * 
   * @param comment Comment object that needs to be added
  */
  public void updateComment (Comment comment, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = comment;

    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling updateComment",
        new ApiException(400, "Missing the required parameter 'comment' when calling updateComment"));
    }

    // create path and map variables
    String path = "/comment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "cm_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates a comment with form data
  * 
   * @param commentId ID of comment that needs to be updated
   * @param userId 
   * @param postId 
   * @param blogId 
   * @param parentId 
   * @param authorDisplayName 
   * @param createdTimestamp 
   * @param modifiedTimestamp 
   * @param content 
   * @param status 
   * @param downvoteCount 
   * @param upvoteCount 
   * @param media 
   * @return void
  */
  public void updateCommentWithForm (String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, Date createdTimestamp, Date modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling updateCommentWithForm",
        new ApiException(400, "Missing the required parameter 'commentId' when calling updateCommentWithForm"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (userId != null) {
        localVarBuilder.addTextBody("userId", ApiInvoker.parameterToString(userId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (postId != null) {
        localVarBuilder.addTextBody("postId", ApiInvoker.parameterToString(postId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (blogId != null) {
        localVarBuilder.addTextBody("blogId", ApiInvoker.parameterToString(blogId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (parentId != null) {
        localVarBuilder.addTextBody("parentId", ApiInvoker.parameterToString(parentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (authorDisplayName != null) {
        localVarBuilder.addTextBody("authorDisplayName", ApiInvoker.parameterToString(authorDisplayName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (createdTimestamp != null) {
        localVarBuilder.addTextBody("created_timestamp", ApiInvoker.parameterToString(createdTimestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (modifiedTimestamp != null) {
        localVarBuilder.addTextBody("modified_timestamp", ApiInvoker.parameterToString(modifiedTimestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (status != null) {
        localVarBuilder.addTextBody("status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (downvoteCount != null) {
        localVarBuilder.addTextBody("downvoteCount", ApiInvoker.parameterToString(downvoteCount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (upvoteCount != null) {
        localVarBuilder.addTextBody("upvoteCount", ApiInvoker.parameterToString(upvoteCount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (media != null) {
        localVarBuilder.addTextBody("media", ApiInvoker.parameterToString(media), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("userId", ApiInvoker.parameterToString(userId));
      formParams.put("postId", ApiInvoker.parameterToString(postId));
      formParams.put("blogId", ApiInvoker.parameterToString(blogId));
      formParams.put("parentId", ApiInvoker.parameterToString(parentId));
      formParams.put("authorDisplayName", ApiInvoker.parameterToString(authorDisplayName));
      formParams.put("created_timestamp", ApiInvoker.parameterToString(createdTimestamp));
      formParams.put("modified_timestamp", ApiInvoker.parameterToString(modifiedTimestamp));
      formParams.put("content", ApiInvoker.parameterToString(content));
      formParams.put("status", ApiInvoker.parameterToString(status));
      formParams.put("downvoteCount", ApiInvoker.parameterToString(downvoteCount));
      formParams.put("upvoteCount", ApiInvoker.parameterToString(upvoteCount));
      formParams.put("media", ApiInvoker.parameterToString(media));
    }

    String[] authNames = new String[] { "cm_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates a comment with form data
   * 
   * @param commentId ID of comment that needs to be updated   * @param userId    * @param postId    * @param blogId    * @param parentId    * @param authorDisplayName    * @param createdTimestamp    * @param modifiedTimestamp    * @param content    * @param status    * @param downvoteCount    * @param upvoteCount    * @param media 
  */
  public void updateCommentWithForm (String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, Date createdTimestamp, Date modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentId' when calling updateCommentWithForm",
        new ApiException(400, "Missing the required parameter 'commentId' when calling updateCommentWithForm"));
    }

    // create path and map variables
    String path = "/comment/{commentId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "commentId" + "\\}", apiInvoker.escapeString(commentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (userId != null) {
        localVarBuilder.addTextBody("userId", ApiInvoker.parameterToString(userId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (postId != null) {
        localVarBuilder.addTextBody("postId", ApiInvoker.parameterToString(postId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (blogId != null) {
        localVarBuilder.addTextBody("blogId", ApiInvoker.parameterToString(blogId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (parentId != null) {
        localVarBuilder.addTextBody("parentId", ApiInvoker.parameterToString(parentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (authorDisplayName != null) {
        localVarBuilder.addTextBody("authorDisplayName", ApiInvoker.parameterToString(authorDisplayName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (createdTimestamp != null) {
        localVarBuilder.addTextBody("created_timestamp", ApiInvoker.parameterToString(createdTimestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (modifiedTimestamp != null) {
        localVarBuilder.addTextBody("modified_timestamp", ApiInvoker.parameterToString(modifiedTimestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (status != null) {
        localVarBuilder.addTextBody("status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (downvoteCount != null) {
        localVarBuilder.addTextBody("downvoteCount", ApiInvoker.parameterToString(downvoteCount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (upvoteCount != null) {
        localVarBuilder.addTextBody("upvoteCount", ApiInvoker.parameterToString(upvoteCount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (media != null) {
        localVarBuilder.addTextBody("media", ApiInvoker.parameterToString(media), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("userId", ApiInvoker.parameterToString(userId));
formParams.put("postId", ApiInvoker.parameterToString(postId));
formParams.put("blogId", ApiInvoker.parameterToString(blogId));
formParams.put("parentId", ApiInvoker.parameterToString(parentId));
formParams.put("authorDisplayName", ApiInvoker.parameterToString(authorDisplayName));
formParams.put("created_timestamp", ApiInvoker.parameterToString(createdTimestamp));
formParams.put("modified_timestamp", ApiInvoker.parameterToString(modifiedTimestamp));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("status", ApiInvoker.parameterToString(status));
formParams.put("downvoteCount", ApiInvoker.parameterToString(downvoteCount));
formParams.put("upvoteCount", ApiInvoker.parameterToString(upvoteCount));
formParams.put("media", ApiInvoker.parameterToString(media));
    }

    String[] authNames = new String[] { "cm_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
