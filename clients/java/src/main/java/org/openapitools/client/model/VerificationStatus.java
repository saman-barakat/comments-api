/*
 * Open APi
 * This is a sample server. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerificationStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-10T16:38:17.227909-07:00[America/Los_Angeles]")
public class VerificationStatus {
  public static final String SERIALIZED_NAME_IS_VERIFIED = "isVerified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  private Boolean isVerified;

  public static final String SERIALIZED_NAME_VERIFICATION_TIMESTAMP = "verificationTimestamp";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TIMESTAMP)
  private OffsetDateTime verificationTimestamp;

  public static final String SERIALIZED_NAME_VERIFICATION_METHOD = "verificationMethod";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_METHOD)
  private String verificationMethod;

  public VerificationStatus() { 
  }

  public VerificationStatus isVerified(Boolean isVerified) {
    
    this.isVerified = isVerified;
    return this;
  }

   /**
   * Get isVerified
   * @return isVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsVerified() {
    return isVerified;
  }


  public void setIsVerified(Boolean isVerified) {
    this.isVerified = isVerified;
  }


  public VerificationStatus verificationTimestamp(OffsetDateTime verificationTimestamp) {
    
    this.verificationTimestamp = verificationTimestamp;
    return this;
  }

   /**
   * Get verificationTimestamp
   * @return verificationTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getVerificationTimestamp() {
    return verificationTimestamp;
  }


  public void setVerificationTimestamp(OffsetDateTime verificationTimestamp) {
    this.verificationTimestamp = verificationTimestamp;
  }


  public VerificationStatus verificationMethod(String verificationMethod) {
    
    this.verificationMethod = verificationMethod;
    return this;
  }

   /**
   * Get verificationMethod
   * @return verificationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVerificationMethod() {
    return verificationMethod;
  }


  public void setVerificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationStatus verificationStatus = (VerificationStatus) o;
    return Objects.equals(this.isVerified, verificationStatus.isVerified) &&
        Objects.equals(this.verificationTimestamp, verificationStatus.verificationTimestamp) &&
        Objects.equals(this.verificationMethod, verificationStatus.verificationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isVerified, verificationTimestamp, verificationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationStatus {\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    verificationTimestamp: ").append(toIndentedString(verificationTimestamp)).append("\n");
    sb.append("    verificationMethod: ").append(toIndentedString(verificationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isVerified");
    openapiFields.add("verificationTimestamp");
    openapiFields.add("verificationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerificationStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VerificationStatus.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationStatus is not found in the empty JSON string", VerificationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VerificationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerificationStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("verificationMethod") != null && !jsonObj.get("verificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationStatus>() {
           @Override
           public void write(JsonWriter out, VerificationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerificationStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerificationStatus
  * @throws IOException if the JSON string is invalid with respect to VerificationStatus
  */
  public static VerificationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationStatus.class);
  }

 /**
  * Convert an instance of VerificationStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

