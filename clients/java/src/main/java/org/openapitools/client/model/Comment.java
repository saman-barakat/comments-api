/*
 * Open APi
 * This is a sample server. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Media;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Comment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-10T16:38:17.227909-07:00[America/Los_Angeles]")
public class Comment {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_POST_ID = "postId";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private String postId;

  public static final String SERIALIZED_NAME_BLOG_ID = "blogId";
  @SerializedName(SERIALIZED_NAME_BLOG_ID)
  private String blogId;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_AUTHOR_DISPLAY_NAME = "authorDisplayName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_DISPLAY_NAME)
  private String authorDisplayName;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_MODIFIED_TIMESTAMP = "modified_timestamp";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIMESTAMP)
  private OffsetDateTime modifiedTimestamp;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("Draft"),
    
    INREVIEW("InReview"),
    
    FLAGGED("Flagged"),
    
    PUBLISHED("Published");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_DOWNVOTE_COUNT = "downvoteCount";
  @SerializedName(SERIALIZED_NAME_DOWNVOTE_COUNT)
  private Integer downvoteCount;

  public static final String SERIALIZED_NAME_UPVOTE_COUNT = "upvoteCount";
  @SerializedName(SERIALIZED_NAME_UPVOTE_COUNT)
  private Integer upvoteCount;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private Media media;

  public Comment() { 
  }

  public Comment id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Comment userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Comment postId(String postId) {
    
    this.postId = postId;
    return this;
  }

   /**
   * Get postId
   * @return postId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPostId() {
    return postId;
  }


  public void setPostId(String postId) {
    this.postId = postId;
  }


  public Comment blogId(String blogId) {
    
    this.blogId = blogId;
    return this;
  }

   /**
   * Get blogId
   * @return blogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBlogId() {
    return blogId;
  }


  public void setBlogId(String blogId) {
    this.blogId = blogId;
  }


  public Comment parentId(String parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentId() {
    return parentId;
  }


  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public Comment authorDisplayName(String authorDisplayName) {
    
    this.authorDisplayName = authorDisplayName;
    return this;
  }

   /**
   * Get authorDisplayName
   * @return authorDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorDisplayName() {
    return authorDisplayName;
  }


  public void setAuthorDisplayName(String authorDisplayName) {
    this.authorDisplayName = authorDisplayName;
  }


  public Comment createdTimestamp(OffsetDateTime createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * Get createdTimestamp
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public Comment modifiedTimestamp(OffsetDateTime modifiedTimestamp) {
    
    this.modifiedTimestamp = modifiedTimestamp;
    return this;
  }

   /**
   * Get modifiedTimestamp
   * @return modifiedTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getModifiedTimestamp() {
    return modifiedTimestamp;
  }


  public void setModifiedTimestamp(OffsetDateTime modifiedTimestamp) {
    this.modifiedTimestamp = modifiedTimestamp;
  }


  public Comment content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public Comment status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Comment downvoteCount(Integer downvoteCount) {
    
    this.downvoteCount = downvoteCount;
    return this;
  }

   /**
   * Get downvoteCount
   * @return downvoteCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDownvoteCount() {
    return downvoteCount;
  }


  public void setDownvoteCount(Integer downvoteCount) {
    this.downvoteCount = downvoteCount;
  }


  public Comment upvoteCount(Integer upvoteCount) {
    
    this.upvoteCount = upvoteCount;
    return this;
  }

   /**
   * Get upvoteCount
   * @return upvoteCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUpvoteCount() {
    return upvoteCount;
  }


  public void setUpvoteCount(Integer upvoteCount) {
    this.upvoteCount = upvoteCount;
  }


  public Comment media(Media media) {
    
    this.media = media;
    return this;
  }

   /**
   * Get media
   * @return media
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Media getMedia() {
    return media;
  }


  public void setMedia(Media media) {
    this.media = media;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.id, comment.id) &&
        Objects.equals(this.userId, comment.userId) &&
        Objects.equals(this.postId, comment.postId) &&
        Objects.equals(this.blogId, comment.blogId) &&
        Objects.equals(this.parentId, comment.parentId) &&
        Objects.equals(this.authorDisplayName, comment.authorDisplayName) &&
        Objects.equals(this.createdTimestamp, comment.createdTimestamp) &&
        Objects.equals(this.modifiedTimestamp, comment.modifiedTimestamp) &&
        Objects.equals(this.content, comment.content) &&
        Objects.equals(this.status, comment.status) &&
        Objects.equals(this.downvoteCount, comment.downvoteCount) &&
        Objects.equals(this.upvoteCount, comment.upvoteCount) &&
        Objects.equals(this.media, comment.media);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, postId, blogId, parentId, authorDisplayName, createdTimestamp, modifiedTimestamp, content, status, downvoteCount, upvoteCount, media);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    blogId: ").append(toIndentedString(blogId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    authorDisplayName: ").append(toIndentedString(authorDisplayName)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    modifiedTimestamp: ").append(toIndentedString(modifiedTimestamp)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    downvoteCount: ").append(toIndentedString(downvoteCount)).append("\n");
    sb.append("    upvoteCount: ").append(toIndentedString(upvoteCount)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("postId");
    openapiFields.add("blogId");
    openapiFields.add("parentId");
    openapiFields.add("authorDisplayName");
    openapiFields.add("created_timestamp");
    openapiFields.add("modified_timestamp");
    openapiFields.add("content");
    openapiFields.add("status");
    openapiFields.add("downvoteCount");
    openapiFields.add("upvoteCount");
    openapiFields.add("media");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Comment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Comment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Comment is not found in the empty JSON string", Comment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Comment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Comment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (jsonObj.get("postId") != null && !jsonObj.get("postId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postId").toString()));
      }
      if (jsonObj.get("blogId") != null && !jsonObj.get("blogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blogId").toString()));
      }
      if (jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if (jsonObj.get("authorDisplayName") != null && !jsonObj.get("authorDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorDisplayName").toString()));
      }
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `media`
      if (jsonObj.getAsJsonObject("media") != null) {
        Media.validateJsonObject(jsonObj.getAsJsonObject("media"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Comment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Comment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Comment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Comment.class));

       return (TypeAdapter<T>) new TypeAdapter<Comment>() {
           @Override
           public void write(JsonWriter out, Comment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Comment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Comment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Comment
  * @throws IOException if the JSON string is invalid with respect to Comment
  */
  public static Comment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Comment.class);
  }

 /**
  * Convert an instance of Comment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

