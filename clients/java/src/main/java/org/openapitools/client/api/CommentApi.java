/*
 * Open APi
 * This is a sample server. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Media;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addComment
     * @param comment Comment object that needs to be added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentCall(Comment comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comment;

        // create path and map variables
        String localVarPath = "/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cm_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommentValidateBeforeCall(Comment comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling addComment(Async)");
        }
        

        okhttp3.Call localVarCall = addCommentCall(comment, _callback);
        return localVarCall;

    }

    /**
     * Add a new comment
     * 
     * @param comment Comment object that needs to be added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public void addComment(Comment comment) throws ApiException {
        addCommentWithHttpInfo(comment);
    }

    /**
     * Add a new comment
     * 
     * @param comment Comment object that needs to be added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCommentWithHttpInfo(Comment comment) throws ApiException {
        okhttp3.Call localVarCall = addCommentValidateBeforeCall(comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new comment (asynchronously)
     * 
     * @param comment Comment object that needs to be added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentAsync(Comment comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommentValidateBeforeCall(comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteComment
     * @param commentId Comment id to delete (required)
     * @param apiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentCall(String commentId, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comment/{commentId}"
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cm_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(String commentId, String apiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCommentCall(commentId, apiKey, _callback);
        return localVarCall;

    }

    /**
     * Deletes a comment
     * 
     * @param commentId Comment id to delete (required)
     * @param apiKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteComment(String commentId, String apiKey) throws ApiException {
        deleteCommentWithHttpInfo(commentId, apiKey);
    }

    /**
     * Deletes a comment
     * 
     * @param commentId Comment id to delete (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommentWithHttpInfo(String commentId, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, apiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a comment (asynchronously)
     * 
     * @param commentId Comment id to delete (required)
     * @param apiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentAsync(String commentId, String apiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, apiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommentById
     * @param commentId ID of comment to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment fetched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentByIdCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comment/{commentId}"
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentByIdValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getCommentById(Async)");
        }
        

        okhttp3.Call localVarCall = getCommentByIdCall(commentId, _callback);
        return localVarCall;

    }

    /**
     * Find comment by ID
     * Returns a single comment
     * @param commentId ID of comment to return (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment fetched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public Comment getCommentById(String commentId) throws ApiException {
        ApiResponse<Comment> localVarResp = getCommentByIdWithHttpInfo(commentId);
        return localVarResp.getData();
    }

    /**
     * Find comment by ID
     * Returns a single comment
     * @param commentId ID of comment to return (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment fetched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> getCommentByIdWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find comment by ID (asynchronously)
     * Returns a single comment
     * @param commentId ID of comment to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment fetched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentByIdAsync(String commentId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateComment
     * @param comment Comment object that needs to be added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentCall(Comment comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comment;

        // create path and map variables
        String localVarPath = "/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cm_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(Comment comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateComment(Async)");
        }
        

        okhttp3.Call localVarCall = updateCommentCall(comment, _callback);
        return localVarCall;

    }

    /**
     * Update an existing comment
     * 
     * @param comment Comment object that needs to be added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public void updateComment(Comment comment) throws ApiException {
        updateCommentWithHttpInfo(comment);
    }

    /**
     * Update an existing comment
     * 
     * @param comment Comment object that needs to be added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCommentWithHttpInfo(Comment comment) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing comment (asynchronously)
     * 
     * @param comment Comment object that needs to be added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Comment not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentAsync(Comment comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCommentWithForm
     * @param commentId ID of comment that needs to be updated (required)
     * @param userId  (optional)
     * @param postId  (optional)
     * @param blogId  (optional)
     * @param parentId  (optional)
     * @param authorDisplayName  (optional)
     * @param createdTimestamp  (optional)
     * @param modifiedTimestamp  (optional)
     * @param content  (optional)
     * @param status  (optional)
     * @param downvoteCount  (optional)
     * @param upvoteCount  (optional)
     * @param media  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentWithFormCall(String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, OffsetDateTime createdTimestamp, OffsetDateTime modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comment/{commentId}"
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        if (postId != null) {
            localVarFormParams.put("postId", postId);
        }

        if (blogId != null) {
            localVarFormParams.put("blogId", blogId);
        }

        if (parentId != null) {
            localVarFormParams.put("parentId", parentId);
        }

        if (authorDisplayName != null) {
            localVarFormParams.put("authorDisplayName", authorDisplayName);
        }

        if (createdTimestamp != null) {
            localVarFormParams.put("created_timestamp", createdTimestamp);
        }

        if (modifiedTimestamp != null) {
            localVarFormParams.put("modified_timestamp", modifiedTimestamp);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (downvoteCount != null) {
            localVarFormParams.put("downvoteCount", downvoteCount);
        }

        if (upvoteCount != null) {
            localVarFormParams.put("upvoteCount", upvoteCount);
        }

        if (media != null) {
            localVarFormParams.put("media", media);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cm_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentWithFormValidateBeforeCall(String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, OffsetDateTime createdTimestamp, OffsetDateTime modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateCommentWithForm(Async)");
        }
        

        okhttp3.Call localVarCall = updateCommentWithFormCall(commentId, userId, postId, blogId, parentId, authorDisplayName, createdTimestamp, modifiedTimestamp, content, status, downvoteCount, upvoteCount, media, _callback);
        return localVarCall;

    }

    /**
     * Updates a comment with form data
     * 
     * @param commentId ID of comment that needs to be updated (required)
     * @param userId  (optional)
     * @param postId  (optional)
     * @param blogId  (optional)
     * @param parentId  (optional)
     * @param authorDisplayName  (optional)
     * @param createdTimestamp  (optional)
     * @param modifiedTimestamp  (optional)
     * @param content  (optional)
     * @param status  (optional)
     * @param downvoteCount  (optional)
     * @param upvoteCount  (optional)
     * @param media  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public void updateCommentWithForm(String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, OffsetDateTime createdTimestamp, OffsetDateTime modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media) throws ApiException {
        updateCommentWithFormWithHttpInfo(commentId, userId, postId, blogId, parentId, authorDisplayName, createdTimestamp, modifiedTimestamp, content, status, downvoteCount, upvoteCount, media);
    }

    /**
     * Updates a comment with form data
     * 
     * @param commentId ID of comment that needs to be updated (required)
     * @param userId  (optional)
     * @param postId  (optional)
     * @param blogId  (optional)
     * @param parentId  (optional)
     * @param authorDisplayName  (optional)
     * @param createdTimestamp  (optional)
     * @param modifiedTimestamp  (optional)
     * @param content  (optional)
     * @param status  (optional)
     * @param downvoteCount  (optional)
     * @param upvoteCount  (optional)
     * @param media  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCommentWithFormWithHttpInfo(String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, OffsetDateTime createdTimestamp, OffsetDateTime modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media) throws ApiException {
        okhttp3.Call localVarCall = updateCommentWithFormValidateBeforeCall(commentId, userId, postId, blogId, parentId, authorDisplayName, createdTimestamp, modifiedTimestamp, content, status, downvoteCount, upvoteCount, media, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a comment with form data (asynchronously)
     * 
     * @param commentId ID of comment that needs to be updated (required)
     * @param userId  (optional)
     * @param postId  (optional)
     * @param blogId  (optional)
     * @param parentId  (optional)
     * @param authorDisplayName  (optional)
     * @param createdTimestamp  (optional)
     * @param modifiedTimestamp  (optional)
     * @param content  (optional)
     * @param status  (optional)
     * @param downvoteCount  (optional)
     * @param upvoteCount  (optional)
     * @param media  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment created successfully </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentWithFormAsync(String commentId, String userId, String postId, String blogId, String parentId, String authorDisplayName, OffsetDateTime createdTimestamp, OffsetDateTime modifiedTimestamp, String content, String status, Integer downvoteCount, Integer upvoteCount, Media media, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentWithFormValidateBeforeCall(commentId, userId, postId, blogId, parentId, authorDisplayName, createdTimestamp, modifiedTimestamp, content, status, downvoteCount, upvoteCount, media, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
