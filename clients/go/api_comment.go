/*
GComments

APIs for creating and managing comments 

API version: 1.0.0
Contact: support@comments.app
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comments

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// CommentApiService CommentApi service
type CommentApiService service

type ApiAddCommentRequest struct {
	ctx context.Context
	ApiService *CommentApiService
	comment *Comment
}

// Comment object that needs to be added
func (r ApiAddCommentRequest) Comment(comment Comment) ApiAddCommentRequest {
	r.comment = &comment
	return r
}

func (r ApiAddCommentRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddCommentExecute(r)
}

/*
AddComment Add a new comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddCommentRequest
*/
func (a *CommentApiService) AddComment(ctx context.Context) ApiAddCommentRequest {
	return ApiAddCommentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CommentApiService) AddCommentExecute(r ApiAddCommentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentApiService.AddComment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comment == nil {
		return nil, reportError("comment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCommentRequest struct {
	ctx context.Context
	ApiService *CommentApiService
	commentId string
	apiKey *string
}

func (r ApiDeleteCommentRequest) ApiKey(apiKey string) ApiDeleteCommentRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiDeleteCommentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCommentExecute(r)
}

/*
DeleteComment Deletes a comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commentId Comment id to delete
 @return ApiDeleteCommentRequest
*/
func (a *CommentApiService) DeleteComment(ctx context.Context, commentId string) ApiDeleteCommentRequest {
	return ApiDeleteCommentRequest{
		ApiService: a,
		ctx: ctx,
		commentId: commentId,
	}
}

// Execute executes the request
func (a *CommentApiService) DeleteCommentExecute(r ApiDeleteCommentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentApiService.DeleteComment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comment/{commentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commentId"+"}", url.PathEscape(parameterToString(r.commentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		localVarHeaderParams["api_key"] = parameterToString(*r.apiKey, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCommentByIdRequest struct {
	ctx context.Context
	ApiService *CommentApiService
	commentId string
}

func (r ApiGetCommentByIdRequest) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.GetCommentByIdExecute(r)
}

/*
GetCommentById Find comment by ID

Returns a single comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commentId ID of comment to return
 @return ApiGetCommentByIdRequest
*/
func (a *CommentApiService) GetCommentById(ctx context.Context, commentId string) ApiGetCommentByIdRequest {
	return ApiGetCommentByIdRequest{
		ApiService: a,
		ctx: ctx,
		commentId: commentId,
	}
}

// Execute executes the request
//  @return Comment
func (a *CommentApiService) GetCommentByIdExecute(r ApiGetCommentByIdRequest) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentApiService.GetCommentById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comment/{commentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commentId"+"}", url.PathEscape(parameterToString(r.commentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api_key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCommentRequest struct {
	ctx context.Context
	ApiService *CommentApiService
	comment *Comment
}

// Comment object that needs to be added
func (r ApiUpdateCommentRequest) Comment(comment Comment) ApiUpdateCommentRequest {
	r.comment = &comment
	return r
}

func (r ApiUpdateCommentRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCommentExecute(r)
}

/*
UpdateComment Update an existing comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateCommentRequest
*/
func (a *CommentApiService) UpdateComment(ctx context.Context) ApiUpdateCommentRequest {
	return ApiUpdateCommentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CommentApiService) UpdateCommentExecute(r ApiUpdateCommentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentApiService.UpdateComment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comment == nil {
		return nil, reportError("comment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCommentWithFormRequest struct {
	ctx context.Context
	ApiService *CommentApiService
	commentId string
	userId *string
	postId *string
	blogId *string
	parentId *string
	authorDisplayName *string
	createdTimestamp *time.Time
	modifiedTimestamp *time.Time
	content *string
	status *string
	downvoteCount *int32
	upvoteCount *int32
	media *Media
}

func (r ApiUpdateCommentWithFormRequest) UserId(userId string) ApiUpdateCommentWithFormRequest {
	r.userId = &userId
	return r
}

func (r ApiUpdateCommentWithFormRequest) PostId(postId string) ApiUpdateCommentWithFormRequest {
	r.postId = &postId
	return r
}

func (r ApiUpdateCommentWithFormRequest) BlogId(blogId string) ApiUpdateCommentWithFormRequest {
	r.blogId = &blogId
	return r
}

func (r ApiUpdateCommentWithFormRequest) ParentId(parentId string) ApiUpdateCommentWithFormRequest {
	r.parentId = &parentId
	return r
}

func (r ApiUpdateCommentWithFormRequest) AuthorDisplayName(authorDisplayName string) ApiUpdateCommentWithFormRequest {
	r.authorDisplayName = &authorDisplayName
	return r
}

func (r ApiUpdateCommentWithFormRequest) CreatedTimestamp(createdTimestamp time.Time) ApiUpdateCommentWithFormRequest {
	r.createdTimestamp = &createdTimestamp
	return r
}

func (r ApiUpdateCommentWithFormRequest) ModifiedTimestamp(modifiedTimestamp time.Time) ApiUpdateCommentWithFormRequest {
	r.modifiedTimestamp = &modifiedTimestamp
	return r
}

func (r ApiUpdateCommentWithFormRequest) Content(content string) ApiUpdateCommentWithFormRequest {
	r.content = &content
	return r
}

func (r ApiUpdateCommentWithFormRequest) Status(status string) ApiUpdateCommentWithFormRequest {
	r.status = &status
	return r
}

func (r ApiUpdateCommentWithFormRequest) DownvoteCount(downvoteCount int32) ApiUpdateCommentWithFormRequest {
	r.downvoteCount = &downvoteCount
	return r
}

func (r ApiUpdateCommentWithFormRequest) UpvoteCount(upvoteCount int32) ApiUpdateCommentWithFormRequest {
	r.upvoteCount = &upvoteCount
	return r
}

func (r ApiUpdateCommentWithFormRequest) Media(media Media) ApiUpdateCommentWithFormRequest {
	r.media = &media
	return r
}

func (r ApiUpdateCommentWithFormRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCommentWithFormExecute(r)
}

/*
UpdateCommentWithForm Updates a comment with form data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commentId ID of comment that needs to be updated
 @return ApiUpdateCommentWithFormRequest
*/
func (a *CommentApiService) UpdateCommentWithForm(ctx context.Context, commentId string) ApiUpdateCommentWithFormRequest {
	return ApiUpdateCommentWithFormRequest{
		ApiService: a,
		ctx: ctx,
		commentId: commentId,
	}
}

// Execute executes the request
func (a *CommentApiService) UpdateCommentWithFormExecute(r ApiUpdateCommentWithFormRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentApiService.UpdateCommentWithForm")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comment/{commentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commentId"+"}", url.PathEscape(parameterToString(r.commentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.userId != nil {
		localVarFormParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.postId != nil {
		localVarFormParams.Add("postId", parameterToString(*r.postId, ""))
	}
	if r.blogId != nil {
		localVarFormParams.Add("blogId", parameterToString(*r.blogId, ""))
	}
	if r.parentId != nil {
		localVarFormParams.Add("parentId", parameterToString(*r.parentId, ""))
	}
	if r.authorDisplayName != nil {
		localVarFormParams.Add("authorDisplayName", parameterToString(*r.authorDisplayName, ""))
	}
	if r.createdTimestamp != nil {
		localVarFormParams.Add("created_timestamp", parameterToString(*r.createdTimestamp, ""))
	}
	if r.modifiedTimestamp != nil {
		localVarFormParams.Add("modified_timestamp", parameterToString(*r.modifiedTimestamp, ""))
	}
	if r.content != nil {
		localVarFormParams.Add("content", parameterToString(*r.content, ""))
	}
	if r.status != nil {
		localVarFormParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.downvoteCount != nil {
		localVarFormParams.Add("downvoteCount", parameterToString(*r.downvoteCount, ""))
	}
	if r.upvoteCount != nil {
		localVarFormParams.Add("upvoteCount", parameterToString(*r.upvoteCount, ""))
	}
	if r.media != nil {
		paramJson, err := parameterToJson(*r.media)
		if err != nil {
			return nil, err
		}
		localVarFormParams.Add("media", paramJson)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
