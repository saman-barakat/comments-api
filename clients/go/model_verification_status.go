/*
GComments

APIs for creating and managing comments 

API version: 1.0.0
Contact: support@comments.app
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comments

import (
	"encoding/json"
	"time"
)

// VerificationStatus struct for VerificationStatus
type VerificationStatus struct {
	IsVerified *bool `json:"isVerified,omitempty"`
	VerificationTimestamp *time.Time `json:"verificationTimestamp,omitempty"`
	VerificationMethod *string `json:"verificationMethod,omitempty"`
}

// NewVerificationStatus instantiates a new VerificationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationStatus() *VerificationStatus {
	this := VerificationStatus{}
	return &this
}

// NewVerificationStatusWithDefaults instantiates a new VerificationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationStatusWithDefaults() *VerificationStatus {
	this := VerificationStatus{}
	return &this
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *VerificationStatus) GetIsVerified() bool {
	if o == nil || o.IsVerified == nil {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationStatus) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || o.IsVerified == nil {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *VerificationStatus) HasIsVerified() bool {
	if o != nil && o.IsVerified != nil {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *VerificationStatus) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetVerificationTimestamp returns the VerificationTimestamp field value if set, zero value otherwise.
func (o *VerificationStatus) GetVerificationTimestamp() time.Time {
	if o == nil || o.VerificationTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.VerificationTimestamp
}

// GetVerificationTimestampOk returns a tuple with the VerificationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationStatus) GetVerificationTimestampOk() (*time.Time, bool) {
	if o == nil || o.VerificationTimestamp == nil {
		return nil, false
	}
	return o.VerificationTimestamp, true
}

// HasVerificationTimestamp returns a boolean if a field has been set.
func (o *VerificationStatus) HasVerificationTimestamp() bool {
	if o != nil && o.VerificationTimestamp != nil {
		return true
	}

	return false
}

// SetVerificationTimestamp gets a reference to the given time.Time and assigns it to the VerificationTimestamp field.
func (o *VerificationStatus) SetVerificationTimestamp(v time.Time) {
	o.VerificationTimestamp = &v
}

// GetVerificationMethod returns the VerificationMethod field value if set, zero value otherwise.
func (o *VerificationStatus) GetVerificationMethod() string {
	if o == nil || o.VerificationMethod == nil {
		var ret string
		return ret
	}
	return *o.VerificationMethod
}

// GetVerificationMethodOk returns a tuple with the VerificationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationStatus) GetVerificationMethodOk() (*string, bool) {
	if o == nil || o.VerificationMethod == nil {
		return nil, false
	}
	return o.VerificationMethod, true
}

// HasVerificationMethod returns a boolean if a field has been set.
func (o *VerificationStatus) HasVerificationMethod() bool {
	if o != nil && o.VerificationMethod != nil {
		return true
	}

	return false
}

// SetVerificationMethod gets a reference to the given string and assigns it to the VerificationMethod field.
func (o *VerificationStatus) SetVerificationMethod(v string) {
	o.VerificationMethod = &v
}

func (o VerificationStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsVerified != nil {
		toSerialize["isVerified"] = o.IsVerified
	}
	if o.VerificationTimestamp != nil {
		toSerialize["verificationTimestamp"] = o.VerificationTimestamp
	}
	if o.VerificationMethod != nil {
		toSerialize["verificationMethod"] = o.VerificationMethod
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationStatus struct {
	value *VerificationStatus
	isSet bool
}

func (v NullableVerificationStatus) Get() *VerificationStatus {
	return v.value
}

func (v *NullableVerificationStatus) Set(val *VerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationStatus(val *VerificationStatus) *NullableVerificationStatus {
	return &NullableVerificationStatus{value: val, isSet: true}
}

func (v NullableVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


