/*
 * GComments
 *
 * APIs for creating and managing comments 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@comments.app
 * Generated by: https://openapi-generator.tech
 */

/// Comment : A user-generated comment.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Comment {
    /// The ID of this comment.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the author.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// The ID of the post hosting this comment.
    #[serde(rename = "postId", skip_serializing_if = "Option::is_none")]
    pub post_id: Option<String>,
    #[serde(rename = "blogId", skip_serializing_if = "Option::is_none")]
    pub blog_id: Option<String>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "authorDisplayName", skip_serializing_if = "Option::is_none")]
    pub author_display_name: Option<String>,
    #[serde(rename = "created_timestamp", skip_serializing_if = "Option::is_none")]
    pub created_timestamp: Option<String>,
    #[serde(rename = "modified_timestamp", skip_serializing_if = "Option::is_none")]
    pub modified_timestamp: Option<String>,
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "downvoteCount", skip_serializing_if = "Option::is_none")]
    pub downvote_count: Option<i32>,
    #[serde(rename = "upvoteCount", skip_serializing_if = "Option::is_none")]
    pub upvote_count: Option<i32>,
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<Box<crate::models::Media>>,
}

impl Comment {
    /// A user-generated comment.
    pub fn new() -> Comment {
        Comment {
            id: None,
            user_id: None,
            post_id: None,
            blog_id: None,
            parent_id: None,
            author_display_name: None,
            created_timestamp: None,
            modified_timestamp: None,
            content: None,
            status: None,
            downvote_count: None,
            upvote_count: None,
            media: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Draft")]
    Draft,
    #[serde(rename = "InReview")]
    InReview,
    #[serde(rename = "Flagged")]
    Flagged,
    #[serde(rename = "Published")]
    Published,
    #[serde(rename = "Deleted")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}

