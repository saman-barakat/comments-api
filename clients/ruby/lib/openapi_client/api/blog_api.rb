=begin
#Open APi

#This is a sample server. 

The version of the OpenAPI document: 1.0.0
Contact: email@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class BlogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new blog
    # @param [Hash] opts the optional parameters
    # @option opts [Blog] :blog Blog object that needs to be added
    # @return [nil]
    def add_blog(opts = {})
      add_blog_with_http_info(opts)
      nil
    end

    # Add a new blog
    # @param [Hash] opts the optional parameters
    # @option opts [Blog] :blog Blog object that needs to be added
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_blog_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlogApi.add_blog ...'
      end
      # resource path
      local_var_path = '/blog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'blog'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"BlogApi.add_blog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlogApi#add_blog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a blog
    # @param blog_id [String] Blog id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [nil]
    def delete_blog(blog_id, opts = {})
      delete_blog_with_http_info(blog_id, opts)
      nil
    end

    # Deletes a blog
    # @param blog_id [String] Blog id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_blog_with_http_info(blog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlogApi.delete_blog ...'
      end
      # verify the required parameter 'blog_id' is set
      if @api_client.config.client_side_validation && blog_id.nil?
        fail ArgumentError, "Missing the required parameter 'blog_id' when calling BlogApi.delete_blog"
      end
      # resource path
      local_var_path = '/blog/{blogId}'.sub('{' + 'blogId' + '}', CGI.escape(blog_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"BlogApi.delete_blog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlogApi#delete_blog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find blog by ID
    # Returns a single blog
    # @param blog_id [String] ID of blog to return
    # @param [Hash] opts the optional parameters
    # @return [Blog]
    def get_blog_by_id(blog_id, opts = {})
      data, _status_code, _headers = get_blog_by_id_with_http_info(blog_id, opts)
      data
    end

    # Find blog by ID
    # Returns a single blog
    # @param blog_id [String] ID of blog to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Blog, Integer, Hash)>] Blog data, response status code and response headers
    def get_blog_by_id_with_http_info(blog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlogApi.get_blog_by_id ...'
      end
      # verify the required parameter 'blog_id' is set
      if @api_client.config.client_side_validation && blog_id.nil?
        fail ArgumentError, "Missing the required parameter 'blog_id' when calling BlogApi.get_blog_by_id"
      end
      # resource path
      local_var_path = '/blog/{blogId}'.sub('{' + 'blogId' + '}', CGI.escape(blog_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Blog'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"BlogApi.get_blog_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlogApi#get_blog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing blog
    # @param [Hash] opts the optional parameters
    # @option opts [Blog] :blog Blog object that needs to be added
    # @return [nil]
    def update_blog(opts = {})
      update_blog_with_http_info(opts)
      nil
    end

    # Update an existing blog
    # @param [Hash] opts the optional parameters
    # @option opts [Blog] :blog Blog object that needs to be added
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_blog_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlogApi.update_blog ...'
      end
      # resource path
      local_var_path = '/blog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'blog'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"BlogApi.update_blog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlogApi#update_blog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a blog with form data
    # @param blog_id [String] ID of blog that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :url 
    # @option opts [String] :auth_token 
    # @option opts [String] :comment_status 
    # @return [nil]
    def update_blog_with_form(blog_id, opts = {})
      update_blog_with_form_with_http_info(blog_id, opts)
      nil
    end

    # Updates a blog with form data
    # @param blog_id [String] ID of blog that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :url 
    # @option opts [String] :auth_token 
    # @option opts [String] :comment_status 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_blog_with_form_with_http_info(blog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlogApi.update_blog_with_form ...'
      end
      # verify the required parameter 'blog_id' is set
      if @api_client.config.client_side_validation && blog_id.nil?
        fail ArgumentError, "Missing the required parameter 'blog_id' when calling BlogApi.update_blog_with_form"
      end
      allowable_values = ["Disabled", "RequireReview", "AutomateReview"]
      if @api_client.config.client_side_validation && opts[:'comment_status'] && !allowable_values.include?(opts[:'comment_status'])
        fail ArgumentError, "invalid value for \"comment_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blog/{blogId}'.sub('{' + 'blogId' + '}', CGI.escape(blog_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['url'] = opts[:'url'] if !opts[:'url'].nil?
      form_params['authToken'] = opts[:'auth_token'] if !opts[:'auth_token'].nil?
      form_params['commentStatus'] = opts[:'comment_status'] if !opts[:'comment_status'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"BlogApi.update_blog_with_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlogApi#update_blog_with_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
