=begin
#Open APi

#This is a sample server. 

The version of the OpenAPI document: 1.0.0
Contact: email@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OpenapiClient
  class CommentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new comment
    # @param comment [Comment] Comment object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_comment(comment, opts = {})
      add_comment_with_http_info(comment, opts)
      nil
    end

    # Add a new comment
    # @param comment [Comment] Comment object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_comment_with_http_info(comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentApi.add_comment ...'
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CommentApi.add_comment"
      end
      # resource path
      local_var_path = '/comment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(comment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"CommentApi.add_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a comment
    # @param comment_id [String] Comment id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [nil]
    def delete_comment(comment_id, opts = {})
      delete_comment_with_http_info(comment_id, opts)
      nil
    end

    # Deletes a comment
    # @param comment_id [String] Comment id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_comment_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentApi.delete_comment ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentApi.delete_comment"
      end
      # resource path
      local_var_path = '/comment/{commentId}'.sub('{' + 'commentId' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"CommentApi.delete_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find comment by ID
    # Returns a single comment
    # @param comment_id [String] ID of comment to return
    # @param [Hash] opts the optional parameters
    # @return [Comment]
    def get_comment_by_id(comment_id, opts = {})
      data, _status_code, _headers = get_comment_by_id_with_http_info(comment_id, opts)
      data
    end

    # Find comment by ID
    # Returns a single comment
    # @param comment_id [String] ID of comment to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def get_comment_by_id_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentApi.get_comment_by_id ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentApi.get_comment_by_id"
      end
      # resource path
      local_var_path = '/comment/{commentId}'.sub('{' + 'commentId' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"CommentApi.get_comment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentApi#get_comment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing comment
    # @param comment [Comment] Comment object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_comment(comment, opts = {})
      update_comment_with_http_info(comment, opts)
      nil
    end

    # Update an existing comment
    # @param comment [Comment] Comment object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_comment_with_http_info(comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentApi.update_comment ...'
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CommentApi.update_comment"
      end
      # resource path
      local_var_path = '/comment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(comment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"CommentApi.update_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a comment with form data
    # @param comment_id [String] ID of comment that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id 
    # @option opts [String] :post_id 
    # @option opts [String] :blog_id 
    # @option opts [String] :parent_id 
    # @option opts [String] :author_display_name 
    # @option opts [Time] :created_timestamp 
    # @option opts [Time] :modified_timestamp 
    # @option opts [String] :content 
    # @option opts [String] :status 
    # @option opts [Integer] :downvote_count 
    # @option opts [Integer] :upvote_count 
    # @option opts [Media] :media 
    # @return [nil]
    def update_comment_with_form(comment_id, opts = {})
      update_comment_with_form_with_http_info(comment_id, opts)
      nil
    end

    # Updates a comment with form data
    # @param comment_id [String] ID of comment that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id 
    # @option opts [String] :post_id 
    # @option opts [String] :blog_id 
    # @option opts [String] :parent_id 
    # @option opts [String] :author_display_name 
    # @option opts [Time] :created_timestamp 
    # @option opts [Time] :modified_timestamp 
    # @option opts [String] :content 
    # @option opts [String] :status 
    # @option opts [Integer] :downvote_count 
    # @option opts [Integer] :upvote_count 
    # @option opts [Media] :media 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_comment_with_form_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentApi.update_comment_with_form ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentApi.update_comment_with_form"
      end
      allowable_values = ["Draft", "InReview", "Flagged", "Published"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/comment/{commentId}'.sub('{' + 'commentId' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      form_params['postId'] = opts[:'post_id'] if !opts[:'post_id'].nil?
      form_params['blogId'] = opts[:'blog_id'] if !opts[:'blog_id'].nil?
      form_params['parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      form_params['authorDisplayName'] = opts[:'author_display_name'] if !opts[:'author_display_name'].nil?
      form_params['created_timestamp'] = opts[:'created_timestamp'] if !opts[:'created_timestamp'].nil?
      form_params['modified_timestamp'] = opts[:'modified_timestamp'] if !opts[:'modified_timestamp'].nil?
      form_params['content'] = opts[:'content'] if !opts[:'content'].nil?
      form_params['status'] = opts[:'status'] if !opts[:'status'].nil?
      form_params['downvoteCount'] = opts[:'downvote_count'] if !opts[:'downvote_count'].nil?
      form_params['upvoteCount'] = opts[:'upvote_count'] if !opts[:'upvote_count'].nil?
      form_params['media'] = opts[:'media'] if !opts[:'media'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cm_auth']

      new_options = opts.merge(
        :operation => :"CommentApi.update_comment_with_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentApi#update_comment_with_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
