/*
 * GComments
 *
 * APIs for creating and managing comments 
 *
 * API version: 1.0.0
 * Contact: support@comments.app
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package comments

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CommentApiController binds http requests to an api service and writes the service results to the http response
type CommentApiController struct {
	service CommentApiServicer
	errorHandler ErrorHandler
}

// CommentApiOption for how the controller is set up.
type CommentApiOption func(*CommentApiController)

// WithCommentApiErrorHandler inject ErrorHandler into controller
func WithCommentApiErrorHandler(h ErrorHandler) CommentApiOption {
	return func(c *CommentApiController) {
		c.errorHandler = h
	}
}

// NewCommentApiController creates a default api controller
func NewCommentApiController(s CommentApiServicer, opts ...CommentApiOption) Router {
	controller := &CommentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommentApiController
func (c *CommentApiController) Routes() Routes {
	return Routes{ 
		{
			"AddComment",
			strings.ToUpper("Post"),
			"/comment",
			c.AddComment,
		},
		{
			"DeleteComment",
			strings.ToUpper("Delete"),
			"/comment/{commentId}",
			c.DeleteComment,
		},
		{
			"GetCommentById",
			strings.ToUpper("Get"),
			"/comment/{commentId}",
			c.GetCommentById,
		},
		{
			"UpdateComment",
			strings.ToUpper("Put"),
			"/comment",
			c.UpdateComment,
		},
		{
			"UpdateCommentWithForm",
			strings.ToUpper("Post"),
			"/comment/{commentId}",
			c.UpdateCommentWithForm,
		},
	}
}

// AddComment - Add a new comment
func (c *CommentApiController) AddComment(w http.ResponseWriter, r *http.Request) {
	commentParam := Comment{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequired(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddComment(r.Context(), commentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteComment - Deletes a comment
func (c *CommentApiController) DeleteComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.DeleteComment(r.Context(), commentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetCommentById - Find comment by ID
func (c *CommentApiController) GetCommentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	
	result, err := c.service.GetCommentById(r.Context(), commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateComment - Update an existing comment
func (c *CommentApiController) UpdateComment(w http.ResponseWriter, r *http.Request) {
	commentParam := Comment{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequired(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateComment(r.Context(), commentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateCommentWithForm - Updates a comment with form data
func (c *CommentApiController) UpdateCommentWithForm(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	
				userIdParam := r.FormValue("userId")
				postIdParam := r.FormValue("postId")
				blogIdParam := r.FormValue("blogId")
				parentIdParam := r.FormValue("parentId")
				authorDisplayNameParam := r.FormValue("authorDisplayName")
				createdTimestampParam := r.FormValue("created_timestamp")
				modifiedTimestampParam := r.FormValue("modified_timestamp")
				contentParam := r.FormValue("content")
				statusParam := r.FormValue("status")
			
	downvoteCountParam, err := parseInt32Parameter(r.FormValue("downvoteCount"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	downvoteCountParam := r.FormValue("downvoteCount")
			
	upvoteCountParam, err := parseInt32Parameter(r.FormValue("upvoteCount"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	upvoteCountParam := r.FormValue("upvoteCount")
				mediaParam := r.FormValue("media")
	result, err := c.service.UpdateCommentWithForm(r.Context(), commentIdParam, userIdParam, postIdParam, blogIdParam, parentIdParam, authorDisplayNameParam, createdTimestampParam, modifiedTimestampParam, contentParam, statusParam, downvoteCountParam, upvoteCountParam, mediaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
