/*
 * GComments
 *
 * APIs for creating and managing comments 
 *
 * API version: 1.0.0
 * Contact: support@comments.app
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gcomments

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BlogApiController binds http requests to an api service and writes the service results to the http response
type BlogApiController struct {
	service BlogApiServicer
	errorHandler ErrorHandler
}

// BlogApiOption for how the controller is set up.
type BlogApiOption func(*BlogApiController)

// WithBlogApiErrorHandler inject ErrorHandler into controller
func WithBlogApiErrorHandler(h ErrorHandler) BlogApiOption {
	return func(c *BlogApiController) {
		c.errorHandler = h
	}
}

// NewBlogApiController creates a default api controller
func NewBlogApiController(s BlogApiServicer, opts ...BlogApiOption) Router {
	controller := &BlogApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BlogApiController
func (c *BlogApiController) Routes() Routes {
	return Routes{ 
		{
			"AddBlog",
			strings.ToUpper("Post"),
			"/blog",
			c.AddBlog,
		},
		{
			"DeleteBlog",
			strings.ToUpper("Delete"),
			"/blog/{blogId}",
			c.DeleteBlog,
		},
		{
			"GetBlogById",
			strings.ToUpper("Get"),
			"/blog/{blogId}",
			c.GetBlogById,
		},
		{
			"UpdateBlog",
			strings.ToUpper("Put"),
			"/blog",
			c.UpdateBlog,
		},
		{
			"UpdateBlogWithForm",
			strings.ToUpper("Post"),
			"/blog/{blogId}",
			c.UpdateBlogWithForm,
		},
	}
}

// AddBlog - Add a new blog
func (c *BlogApiController) AddBlog(w http.ResponseWriter, r *http.Request) {
	blogParam := Blog{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&blogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBlogRequired(blogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddBlog(r.Context(), blogParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteBlog - Deletes a blog
func (c *BlogApiController) DeleteBlog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	blogIdParam := params["blogId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.DeleteBlog(r.Context(), blogIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetBlogById - Find blog by ID
func (c *BlogApiController) GetBlogById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	blogIdParam := params["blogId"]
	
	result, err := c.service.GetBlogById(r.Context(), blogIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateBlog - Update an existing blog
func (c *BlogApiController) UpdateBlog(w http.ResponseWriter, r *http.Request) {
	blogParam := Blog{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&blogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBlogRequired(blogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBlog(r.Context(), blogParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateBlogWithForm - Updates a blog with form data
func (c *BlogApiController) UpdateBlogWithForm(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	blogIdParam := params["blogId"]
	
				nameParam := r.FormValue("name")
				urlParam := r.FormValue("url")
				authTokenParam := r.FormValue("authToken")
				commentStatusParam := r.FormValue("commentStatus")
	result, err := c.service.UpdateBlogWithForm(r.Context(), blogIdParam, nameParam, urlParam, authTokenParam, commentStatusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
