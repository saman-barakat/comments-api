/*
 * Open APi
 *
 * This is a sample server. 
 *
 * API version: 1.0.0
 * Contact: email@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package comments

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostApiController binds http requests to an api service and writes the service results to the http response
type PostApiController struct {
	service PostApiServicer
	errorHandler ErrorHandler
}

// PostApiOption for how the controller is set up.
type PostApiOption func(*PostApiController)

// WithPostApiErrorHandler inject ErrorHandler into controller
func WithPostApiErrorHandler(h ErrorHandler) PostApiOption {
	return func(c *PostApiController) {
		c.errorHandler = h
	}
}

// NewPostApiController creates a default api controller
func NewPostApiController(s PostApiServicer, opts ...PostApiOption) Router {
	controller := &PostApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostApiController
func (c *PostApiController) Routes() Routes {
	return Routes{ 
		{
			"AddPost",
			strings.ToUpper("Post"),
			"/post",
			c.AddPost,
		},
		{
			"DeletePost",
			strings.ToUpper("Delete"),
			"/post/{postId}",
			c.DeletePost,
		},
		{
			"GetPostById",
			strings.ToUpper("Get"),
			"/post/{postId}",
			c.GetPostById,
		},
		{
			"UpdatePost",
			strings.ToUpper("Put"),
			"/post",
			c.UpdatePost,
		},
		{
			"UpdatePostWithForm",
			strings.ToUpper("Post"),
			"/post/{postId}",
			c.UpdatePostWithForm,
		},
	}
}

// AddPost - Add a new post
func (c *PostApiController) AddPost(w http.ResponseWriter, r *http.Request) {
	postParam := Post{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostRequired(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddPost(r.Context(), postParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeletePost - Deletes a post
func (c *PostApiController) DeletePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.DeletePost(r.Context(), postIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetPostById - Find post by ID
func (c *PostApiController) GetPostById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]
	
	result, err := c.service.GetPostById(r.Context(), postIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdatePost - Update an existing post
func (c *PostApiController) UpdatePost(w http.ResponseWriter, r *http.Request) {
	postParam := Post{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostRequired(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePost(r.Context(), postParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdatePostWithForm - Updates a post with form data
func (c *PostApiController) UpdatePostWithForm(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	postIdParam := params["postId"]
	
				titleParam := r.FormValue("title")
				urlParam := r.FormValue("url")
				excerptParam := r.FormValue("excerpt")
				contentParam := r.FormValue("content")
				commentStatusParam := r.FormValue("commentStatus")
				postTypeParam := r.FormValue("postType")
	result, err := c.service.UpdatePostWithForm(r.Context(), postIdParam, titleParam, urlParam, excerptParam, contentParam, commentStatusParam, postTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
