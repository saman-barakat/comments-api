/*
 * GComments
 *
 * APIs for creating and managing comments 
 *
 * API version: 1.0.0
 * Contact: support@comments.app
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gcomments

type User struct {

	Id string `json:"id,omitempty"`

	Username string `json:"username,omitempty"`

	Password string `json:"password,omitempty"`

	NiceName string `json:"niceName,omitempty"`

	AvatarUrl string `json:"avatarUrl,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	Email string `json:"email,omitempty"`

	Role Role `json:"role,omitempty"`

	Blogs []Blog `json:"blogs,omitempty"`

	VerificationStatus VerificationStatus `json:"verificationStatus,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	if err := AssertRoleRequired(obj.Role); err != nil {
		return err
	}
	for _, el := range obj.Blogs {
		if err := AssertBlogRequired(el); err != nil {
			return err
		}
	}
	if err := AssertVerificationStatusRequired(obj.VerificationStatus); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
