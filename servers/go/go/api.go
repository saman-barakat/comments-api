/*
 * Open APi
 *
 * This is a sample server. 
 *
 * API version: 1.0.0
 * Contact: email@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package comments

import (
	"context"
	"net/http"
)



// BlogApiRouter defines the required methods for binding the api requests to a responses for the BlogApi
// The BlogApiRouter implementation should parse necessary information from the http request,
// pass the data to a BlogApiServicer to perform the required actions, then write the service results to the http response.
type BlogApiRouter interface { 
	AddBlog(http.ResponseWriter, *http.Request)
	DeleteBlog(http.ResponseWriter, *http.Request)
	GetBlogById(http.ResponseWriter, *http.Request)
	UpdateBlog(http.ResponseWriter, *http.Request)
	UpdateBlogWithForm(http.ResponseWriter, *http.Request)
}
// CommentApiRouter defines the required methods for binding the api requests to a responses for the CommentApi
// The CommentApiRouter implementation should parse necessary information from the http request,
// pass the data to a CommentApiServicer to perform the required actions, then write the service results to the http response.
type CommentApiRouter interface { 
	AddComment(http.ResponseWriter, *http.Request)
	DeleteComment(http.ResponseWriter, *http.Request)
	GetCommentById(http.ResponseWriter, *http.Request)
	UpdateComment(http.ResponseWriter, *http.Request)
	UpdateCommentWithForm(http.ResponseWriter, *http.Request)
}
// PostApiRouter defines the required methods for binding the api requests to a responses for the PostApi
// The PostApiRouter implementation should parse necessary information from the http request,
// pass the data to a PostApiServicer to perform the required actions, then write the service results to the http response.
type PostApiRouter interface { 
	AddPost(http.ResponseWriter, *http.Request)
	DeletePost(http.ResponseWriter, *http.Request)
	GetPostById(http.ResponseWriter, *http.Request)
	UpdatePost(http.ResponseWriter, *http.Request)
	UpdatePostWithForm(http.ResponseWriter, *http.Request)
}
// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request,
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface { 
	CreateUser(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	GetUserByName(http.ResponseWriter, *http.Request)
	LoginUser(http.ResponseWriter, *http.Request)
	LogoutUser(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
}


// BlogApiServicer defines the api actions for the BlogApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BlogApiServicer interface { 
	AddBlog(context.Context, Blog) (ImplResponse, error)
	DeleteBlog(context.Context, string, string) (ImplResponse, error)
	GetBlogById(context.Context, string) (ImplResponse, error)
	UpdateBlog(context.Context, Blog) (ImplResponse, error)
	UpdateBlogWithForm(context.Context, string, string, string, string, string) (ImplResponse, error)
}


// CommentApiServicer defines the api actions for the CommentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CommentApiServicer interface { 
	AddComment(context.Context, Comment) (ImplResponse, error)
	DeleteComment(context.Context, string, string) (ImplResponse, error)
	GetCommentById(context.Context, string) (ImplResponse, error)
	UpdateComment(context.Context, Comment) (ImplResponse, error)
	UpdateCommentWithForm(context.Context, string, string, string, string, string, string, time.Time, time.Time, string, string, int32, int32, Media) (ImplResponse, error)
}


// PostApiServicer defines the api actions for the PostApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PostApiServicer interface { 
	AddPost(context.Context, Post) (ImplResponse, error)
	DeletePost(context.Context, string, string) (ImplResponse, error)
	GetPostById(context.Context, string) (ImplResponse, error)
	UpdatePost(context.Context, Post) (ImplResponse, error)
	UpdatePostWithForm(context.Context, string, string, string, string, string, string, string) (ImplResponse, error)
}


// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserApiServicer interface { 
	CreateUser(context.Context, User) (ImplResponse, error)
	DeleteUser(context.Context, string) (ImplResponse, error)
	GetUserByName(context.Context, string) (ImplResponse, error)
	LoginUser(context.Context, string, string) (ImplResponse, error)
	LogoutUser(context.Context) (ImplResponse, error)
	UpdateUser(context.Context, string, User) (ImplResponse, error)
}
