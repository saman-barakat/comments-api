# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gcomments.models.base_model_ import Model
from gcomments.models.media import Media
from gcomments import util

from gcomments.models.media import Media  # noqa: E501

class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, user_id=None, post_id=None, blog_id=None, parent_id=None, author_display_name=None, created_timestamp=None, modified_timestamp=None, content=None, status=None, downvote_count=None, upvote_count=None, media=None):  # noqa: E501
        """Comment - a model defined in OpenAPI

        :param id: The id of this Comment.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this Comment.  # noqa: E501
        :type user_id: str
        :param post_id: The post_id of this Comment.  # noqa: E501
        :type post_id: str
        :param blog_id: The blog_id of this Comment.  # noqa: E501
        :type blog_id: str
        :param parent_id: The parent_id of this Comment.  # noqa: E501
        :type parent_id: str
        :param author_display_name: The author_display_name of this Comment.  # noqa: E501
        :type author_display_name: str
        :param created_timestamp: The created_timestamp of this Comment.  # noqa: E501
        :type created_timestamp: datetime
        :param modified_timestamp: The modified_timestamp of this Comment.  # noqa: E501
        :type modified_timestamp: datetime
        :param content: The content of this Comment.  # noqa: E501
        :type content: str
        :param status: The status of this Comment.  # noqa: E501
        :type status: str
        :param downvote_count: The downvote_count of this Comment.  # noqa: E501
        :type downvote_count: int
        :param upvote_count: The upvote_count of this Comment.  # noqa: E501
        :type upvote_count: int
        :param media: The media of this Comment.  # noqa: E501
        :type media: Media
        """
        self.openapi_types = {
            'id': str,
            'user_id': str,
            'post_id': str,
            'blog_id': str,
            'parent_id': str,
            'author_display_name': str,
            'created_timestamp': datetime,
            'modified_timestamp': datetime,
            'content': str,
            'status': str,
            'downvote_count': int,
            'upvote_count': int,
            'media': Media
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userId',
            'post_id': 'postId',
            'blog_id': 'blogId',
            'parent_id': 'parentId',
            'author_display_name': 'authorDisplayName',
            'created_timestamp': 'created_timestamp',
            'modified_timestamp': 'modified_timestamp',
            'content': 'content',
            'status': 'status',
            'downvote_count': 'downvoteCount',
            'upvote_count': 'upvoteCount',
            'media': 'media'
        }

        self._id = id
        self._user_id = user_id
        self._post_id = post_id
        self._blog_id = blog_id
        self._parent_id = parent_id
        self._author_display_name = author_display_name
        self._created_timestamp = created_timestamp
        self._modified_timestamp = modified_timestamp
        self._content = content
        self._status = status
        self._downvote_count = downvote_count
        self._upvote_count = upvote_count
        self._media = media

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Comment.

        The ID of this comment.  # noqa: E501

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        The ID of this comment.  # noqa: E501

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Comment.

        The ID of the author.  # noqa: E501

        :return: The user_id of this Comment.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Comment.

        The ID of the author.  # noqa: E501

        :param user_id: The user_id of this Comment.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def post_id(self):
        """Gets the post_id of this Comment.

        The ID of the post hosting this comment.  # noqa: E501

        :return: The post_id of this Comment.
        :rtype: str
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this Comment.

        The ID of the post hosting this comment.  # noqa: E501

        :param post_id: The post_id of this Comment.
        :type post_id: str
        """

        self._post_id = post_id

    @property
    def blog_id(self):
        """Gets the blog_id of this Comment.


        :return: The blog_id of this Comment.
        :rtype: str
        """
        return self._blog_id

    @blog_id.setter
    def blog_id(self, blog_id):
        """Sets the blog_id of this Comment.


        :param blog_id: The blog_id of this Comment.
        :type blog_id: str
        """

        self._blog_id = blog_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Comment.


        :return: The parent_id of this Comment.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Comment.


        :param parent_id: The parent_id of this Comment.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def author_display_name(self):
        """Gets the author_display_name of this Comment.


        :return: The author_display_name of this Comment.
        :rtype: str
        """
        return self._author_display_name

    @author_display_name.setter
    def author_display_name(self, author_display_name):
        """Sets the author_display_name of this Comment.


        :param author_display_name: The author_display_name of this Comment.
        :type author_display_name: str
        """

        self._author_display_name = author_display_name

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Comment.


        :return: The created_timestamp of this Comment.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Comment.


        :param created_timestamp: The created_timestamp of this Comment.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def modified_timestamp(self):
        """Gets the modified_timestamp of this Comment.


        :return: The modified_timestamp of this Comment.
        :rtype: datetime
        """
        return self._modified_timestamp

    @modified_timestamp.setter
    def modified_timestamp(self, modified_timestamp):
        """Sets the modified_timestamp of this Comment.


        :param modified_timestamp: The modified_timestamp of this Comment.
        :type modified_timestamp: datetime
        """

        self._modified_timestamp = modified_timestamp

    @property
    def content(self):
        """Gets the content of this Comment.


        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.


        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def status(self):
        """Gets the status of this Comment.


        :return: The status of this Comment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Comment.


        :param status: The status of this Comment.
        :type status: str
        """
        allowed_values = ["Draft", "InReview", "Flagged", "Published", "Deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def downvote_count(self):
        """Gets the downvote_count of this Comment.


        :return: The downvote_count of this Comment.
        :rtype: int
        """
        return self._downvote_count

    @downvote_count.setter
    def downvote_count(self, downvote_count):
        """Sets the downvote_count of this Comment.


        :param downvote_count: The downvote_count of this Comment.
        :type downvote_count: int
        """

        self._downvote_count = downvote_count

    @property
    def upvote_count(self):
        """Gets the upvote_count of this Comment.


        :return: The upvote_count of this Comment.
        :rtype: int
        """
        return self._upvote_count

    @upvote_count.setter
    def upvote_count(self, upvote_count):
        """Sets the upvote_count of this Comment.


        :param upvote_count: The upvote_count of this Comment.
        :type upvote_count: int
        """

        self._upvote_count = upvote_count

    @property
    def media(self):
        """Gets the media of this Comment.


        :return: The media of this Comment.
        :rtype: Media
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Comment.


        :param media: The media of this Comment.
        :type media: Media
        """

        self._media = media
