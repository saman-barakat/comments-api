# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gcomments.models.base_model_ import Model
from gcomments import util


class Post(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, url=None, excerpt=None, content=None, comment_status=None, post_type=None):  # noqa: E501
        """Post - a model defined in OpenAPI

        :param id: The id of this Post.  # noqa: E501
        :type id: str
        :param title: The title of this Post.  # noqa: E501
        :type title: str
        :param url: The url of this Post.  # noqa: E501
        :type url: str
        :param excerpt: The excerpt of this Post.  # noqa: E501
        :type excerpt: str
        :param content: The content of this Post.  # noqa: E501
        :type content: str
        :param comment_status: The comment_status of this Post.  # noqa: E501
        :type comment_status: str
        :param post_type: The post_type of this Post.  # noqa: E501
        :type post_type: str
        """
        self.openapi_types = {
            'id': str,
            'title': str,
            'url': str,
            'excerpt': str,
            'content': str,
            'comment_status': str,
            'post_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'url': 'url',
            'excerpt': 'excerpt',
            'content': 'content',
            'comment_status': 'commentStatus',
            'post_type': 'postType'
        }

        self._id = id
        self._title = title
        self._url = url
        self._excerpt = excerpt
        self._content = content
        self._comment_status = comment_status
        self._post_type = post_type

    @classmethod
    def from_dict(cls, dikt) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Post of this Post.  # noqa: E501
        :rtype: Post
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Post.


        :return: The id of this Post.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Post.


        :param id: The id of this Post.
        :type id: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Post.


        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Post.


        :param title: The title of this Post.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this Post.


        :return: The url of this Post.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Post.


        :param url: The url of this Post.
        :type url: str
        """

        self._url = url

    @property
    def excerpt(self):
        """Gets the excerpt of this Post.


        :return: The excerpt of this Post.
        :rtype: str
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this Post.


        :param excerpt: The excerpt of this Post.
        :type excerpt: str
        """

        self._excerpt = excerpt

    @property
    def content(self):
        """Gets the content of this Post.


        :return: The content of this Post.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Post.


        :param content: The content of this Post.
        :type content: str
        """

        self._content = content

    @property
    def comment_status(self):
        """Gets the comment_status of this Post.


        :return: The comment_status of this Post.
        :rtype: str
        """
        return self._comment_status

    @comment_status.setter
    def comment_status(self, comment_status):
        """Sets the comment_status of this Post.


        :param comment_status: The comment_status of this Post.
        :type comment_status: str
        """
        allowed_values = ["Disabled", "RequireReview", "AutomateReview"]  # noqa: E501
        if comment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `comment_status` ({0}), must be one of {1}"
                .format(comment_status, allowed_values)
            )

        self._comment_status = comment_status

    @property
    def post_type(self):
        """Gets the post_type of this Post.


        :return: The post_type of this Post.
        :rtype: str
        """
        return self._post_type

    @post_type.setter
    def post_type(self, post_type):
        """Sets the post_type of this Post.


        :param post_type: The post_type of this Post.
        :type post_type: str
        """

        self._post_type = post_type
