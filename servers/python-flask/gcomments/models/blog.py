# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gcomments.models.base_model_ import Model
from gcomments import util


class Blog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, url=None, auth_token=None, comment_status=None):  # noqa: E501
        """Blog - a model defined in OpenAPI

        :param id: The id of this Blog.  # noqa: E501
        :type id: str
        :param name: The name of this Blog.  # noqa: E501
        :type name: str
        :param url: The url of this Blog.  # noqa: E501
        :type url: str
        :param auth_token: The auth_token of this Blog.  # noqa: E501
        :type auth_token: str
        :param comment_status: The comment_status of this Blog.  # noqa: E501
        :type comment_status: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'url': str,
            'auth_token': str,
            'comment_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'url': 'url',
            'auth_token': 'authToken',
            'comment_status': 'commentStatus'
        }

        self._id = id
        self._name = name
        self._url = url
        self._auth_token = auth_token
        self._comment_status = comment_status

    @classmethod
    def from_dict(cls, dikt) -> 'Blog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Blog of this Blog.  # noqa: E501
        :rtype: Blog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Blog.


        :return: The id of this Blog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Blog.


        :param id: The id of this Blog.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Blog.


        :return: The name of this Blog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Blog.


        :param name: The name of this Blog.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Blog.


        :return: The url of this Blog.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Blog.


        :param url: The url of this Blog.
        :type url: str
        """

        self._url = url

    @property
    def auth_token(self):
        """Gets the auth_token of this Blog.


        :return: The auth_token of this Blog.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this Blog.


        :param auth_token: The auth_token of this Blog.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def comment_status(self):
        """Gets the comment_status of this Blog.


        :return: The comment_status of this Blog.
        :rtype: str
        """
        return self._comment_status

    @comment_status.setter
    def comment_status(self, comment_status):
        """Sets the comment_status of this Blog.


        :param comment_status: The comment_status of this Blog.
        :type comment_status: str
        """
        allowed_values = ["Disabled", "RequireReview", "AutomateReview"]  # noqa: E501
        if comment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `comment_status` ({0}), must be one of {1}"
                .format(comment_status, allowed_values)
            )

        self._comment_status = comment_status
