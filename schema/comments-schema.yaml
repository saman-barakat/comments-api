openapi: 3.0.0
info:
  version: "1.0.0"
  title: GComments
  description: |
    APIs for creating and managing comments
  termsOfService: 'https://comments.app/tos'
  contact:
    name: API Support
    url: https://comments.app/support
    email: support@comments.app
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:8080'
tags:
  - name: comment
    description: Everything about your Comments
  - name: post
    description: Everything about your Posts
  - name: user
    description: Everything about your Users
  - name: blog
    description: Everything about your Blogs
paths:
  /comment:
    post:
      tags:
        - comment
      summary: Add a new comment
      operationId: addComment
      responses:
        '200':
          description: Comment created successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Comment'
    put:
      tags:
        - comment
      summary: Update an existing comment
      operationId: updateComment
      responses:
        '200':
          description: Comment updated successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
        '405':
          description: Validation exception
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Comment'
  '/comment/{commentId}':
    get:
      tags:
        - comment
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          description: ID of comment to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - api_key: []
    post:
      tags:
        - comment
      summary: Updates a comment with form data
      operationId: updateCommentWithForm
      parameters:
        - name: commentId
          in: path
          description: ID of comment that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment created successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: string
                postId:
                  type: string
                blogId:
                  type: string
                parentId:
                  type: string
                authorDisplayName:
                  type: string
                created_timestamp:
                  type: string
                  format: date-time
                modified_timestamp:
                  type: string
                  format: date-time
                content:
                  type: string
                status:
                  type: string
                  enum:
                    - Draft
                    - InReview        
                    - Flagged
                    - Published
                downvoteCount:
                  type: integer
                upvoteCount:
                  type: integer
                media:
                  $ref: '#/components/schemas/Media' 
    delete:
      tags:
        - comment
      summary: Deletes a comment
      operationId: deleteComment
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Comment id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - cm_auth:
            - 'write'
            - 'read'
  /post:
    post:
      tags:
        - post
      summary: Add a new post
      operationId: addPost
      responses:
        '200':
          description: Post created successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Post'
    put:
      tags:
        - post
      summary: Update an existing post
      operationId: updatePost
      responses:
        '200':
          description: Post updated successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
        '405':
          description: Validation exception
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Post'
  '/post/{postId}':
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - api_key: []
    post:
      tags:
        - post
      summary: Updates a post with form data
      operationId: updatePostWithForm
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post updated successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                url:
                  type: string
                excerpt:
                  type: string
                content:
                  type: string
                commentStatus:
                  type: string
                  enum:
                  - Disabled
                  - RequireReview      
                  - AutomateReview 
                postType:
                  type: string 
    delete:
      tags:
        - post
      summary: Deletes a post
      operationId: deletePost
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      security:
        - cm_auth:
            - 'write'
            - 'read'
  /blog:
    post:
      tags:
        - blog
      summary: Add a new blog
      operationId: addBlog
      responses:
        '200':
          description: Blog created successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Blog'
    put:
      tags:
        - blog
      summary: Update an existing blog
      operationId: updateBlog
      responses:
        '200':
          description: Blog updated successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog not found
        '405':
          description: Validation exception
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        $ref: '#/components/requestBodies/Blog'
  '/blog/{blogId}':
    get:
      tags:
        - blog
      summary: Find blog by ID
      description: Returns a single blog
      operationId: getBlogById
      parameters:
        - name: blogId
          in: path
          description: ID of blog to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: blog fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
            application/xml:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog not found
      security:
        - api_key: []
    post:
      tags:
        - blog
      summary: Updates a blog with form data
      operationId: updateBlogWithForm
      parameters:
        - name: blogId
          in: path
          description: ID of blog that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blog updated successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                authToken:
                  type: string
                commentStatus:
                  type: string
                  enum:
                  - Disabled
                  - RequireReview      
                  - AutomateReview           
    delete:
      tags:
        - blog
      summary: Deletes a blog
      operationId: deleteBlog
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: blogId
          in: path
          description: Blog id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blog deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog not found
      security:
        - cm_auth:
            - 'write'
            - 'read'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        '200':
          description: User created successfully
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User login successfully
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: User logout successfully
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        postId:
          type: string
        blogId:
          type: string
        parentId:
          type: string
        authorDisplayName:
          type: string
        created_timestamp:
          type: string
          format: date-time
        modified_timestamp:
          type: string
          format: date-time
        content:
          type: string
        status:
          type: string
          enum:
            - Draft
            - InReview        
            - Flagged
            - Published
        downvoteCount:
          type: integer
        upvoteCount:
          type: integer
        media:
          $ref: '#/components/schemas/Media'    
      xml:
        name: Comment
    Media:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        name:
          type: string
        content:
          type: string
      xml:
        name: Media 
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        url:
          type: string
        excerpt:
          type: string
        content:
          type: string
        commentStatus:
          type: string
          enum:
            - Disabled
            - RequireReview      
            - AutomateReview
        postType:
          type: string
      xml:
        name: Post
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        niceName:
          type: string
        avatarUrl:
          type: string
        displayName:
          type: string
        email:
          type: string
        role:
           $ref: '#/components/schemas/Role'
        blogs:
          type: array
          xml:
            name: blog
            wrapped: true
          items:
            $ref: '#/components/schemas/Blog'
        verificationStatus:
          $ref: '#/components/schemas/VerificationStatus' 
      xml:
        name: User
    Role:
      type: object
      properties:
        name:
          type: string
        capabilities:
           type: array
           items:
            type: string
      xml:
        name: Role
    VerificationStatus:
      type: object
      properties:
        isVerified:
          type: boolean
        verificationTimestamp:
          type: string
          format: date-time
        verificationMethod:
          type: string
      xml:
        name: VerificationStatus
    Blog:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        authToken:
          type: string
        commentStatus:
          type: string
          enum:
            - Disabled
            - RequireReview      
            - AutomateReview
      xml:
        name: Blog
  requestBodies:
    Comment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
        application/xml:
          schema:
            $ref: '#/components/schemas/Comment'
      description: Comment object that needs to be added
      required: true
    Post:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
        application/xml:
          schema:
            $ref: '#/components/schemas/Post'
      description: Post object that needs to be added
    Blog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Blog'
        application/xml:
          schema:
            $ref: '#/components/schemas/Blog'
      description: Blog object that needs to be added
  securitySchemes:
    cm_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write': modify 
            'read': read
    api_key:
      type: apiKey
      name: api_key
      in: header