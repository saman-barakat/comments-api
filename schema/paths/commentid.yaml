# '/comment/{commentId}' path:
    get:
      tags:
        - comment
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          description: ID of comment to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment fetched successfully
          content:
            application/json:
              schema:
                $ref: '../comments-schema/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '../comments-schema/components/schemas/Comment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - api_key: []
    post:
      tags:
        - comment
      summary: Updates a comment with form data
      operationId: updateCommentWithForm
      parameters:
        - name: commentId
          in: path
          description: ID of comment that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment created successfully
        '405':
          description: Invalid input
      security:
        - cm_auth:
            - 'write'
            - 'read'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: string
                postId:
                  type: string
                blogId:
                  type: string
                parentId:
                  type: string
                authorDisplayName:
                  type: string
                created_timestamp:
                  type: string
                  format: date-time
                modified_timestamp:
                  type: string
                  format: date-time
                content:
                  type: string
                status:
                  type: boolean
                  enum:
                    - Draft
                    - InReview        
                    - Flagged
                    - Published
                downvoteCount:
                  type: integer
                upvoteCount:
                  type: integer
                media:
                  $ref: '../comments-schema/components/schemas/Media' 
    delete:
      tags:
        - comment
      summary: Deletes a comment
      operationId: deleteComment
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Comment id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - cm_auth:
            - 'write'
            - 'read'